#!/usr/bin/env node

const prompts = require('prompts');
const languages = require('./Languages');
const { managers } = require('./PackageManagers');
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Utilitaires
const utils = {
  formatProjectName: (name) => name.toLowerCase().replace(/\s+/g, '-'),
  executeCommand: (command, options = {}) => execSync(command, { stdio: 'inherit', ...options }),
  updatePackageJson: (projectPath, updateFn) => {
    const packageJsonPath = path.join(projectPath, 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    updateFn(packageJson);
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  },
  writeFile: (filePath, content) => fs.writeFileSync(filePath, content),
  createDirectory: (dirPath) => fs.mkdirSync(dirPath, { recursive: true }),
};

async function main() {
  try {
    // Sélection de la langue
    const language = await chooseLanguage();
    const lang = languages[language];

    if (!lang || !lang.questions) {
      throw new Error('Language configuration is invalid');
    }

    console.log(lang.welcome);

    // Configuration du projet
    const config = await getProjectConfig(lang);

    // Création du projet
    await createProject(config, lang);

    // Initialisation de Git
    if (config.initGit) {
      await initializeGit(lang);
    }

    // Installation du gestionnaire d'état
    if (config.stateManager !== 'none') {
      await installStateManager(config, lang);
    }

    // Installation de la bibliothèque de style
    if (config.stylingLibrary !== 'none') {
      await installStylingLibrary(config, lang);
    }

    // Affichage du résumé du projet
    displayProjectSummary(config, lang);

  } catch (error) {
    console.error(lang ? lang.error : "An error occurred:", error);
  }
}

async function chooseLanguage() {
  const languageChoice = await prompts({
    type: 'select',
    name: 'language',
    message: 'Choose your language / Choisissez votre langue :',
    choices: [
      { title: 'English', value: 'en' },
      { title: 'Français', value: 'fr' }
    ]
  });
  return languageChoice.language;
}

async function getProjectConfig(lang) {
  const allQuestions = [
    ...lang.questions,
    {
      type: (prev, values) => values.bundler === 'next' ? null : 'select',
      name: 'framework',
      message: lang.chooseFramework,
      choices: (prev, values) => values.bundler === 'next' ? null : [
        { title: 'React', value: 'react' },
        { title: 'Vue', value: 'vue' },
        { title: 'Preact', value: 'preact' },
        { title: 'Lit', value: 'lit' },
        { title: 'Svelte', value: 'svelte' },
        { title: 'Solid', value: 'solid' },
        { title: 'Qwik', value: 'qwik' },
        { title: 'Vanilla', value: 'vanilla' }
      ]
    },
    {
      type: 'select',
      name: 'stateManager',
      message: lang.chooseStateManager,
      choices: [
        { title: lang.none, value: 'none' },
        { title: 'Redux', value: 'redux' },
        { title: 'MobX', value: 'mobx' },
        { title: 'Recoil', value: 'recoil' },
        { title: 'Zustand', value: 'zustand' }
      ]
    },
    {
      type: 'select',
      name: 'stylingLibrary',
      message: lang.chooseStylingLibrary,
      choices: [
        { title: lang.none, value: 'none' },
        { title: 'Styled-components', value: 'styled-components' },
        { title: 'Emotion', value: 'emotion' },
        { title: 'Tailwind CSS', value: 'tailwind' },
        { title: 'SASS', value: 'sass' },
        { title: 'Bootstrap', value: 'bootstrap' },
        { title: 'Pico CSS', value: 'pico' }
      ]
    },
    // ... autres questions ...
  ];
  const response = await prompts(allQuestions);
  return {
    projectName: utils.formatProjectName(response.projectName),
    packageManager: response.packageManager,
    bundler: response.bundler,
    framework: response.bundler === 'next' ? 'React' : response.framework,
    useTypeScript: response.useTypeScript,
    stateManager: response.stateManager,
    stylingLibrary: response.stylingLibrary,
    initGit: response.initGit,
    setupTests: response.setupTests,
    setupCI: response.setupCI,
    setupDocker: response.setupDocker,
    installReactRouter: response.installReactRouter
  };
}

async function createProject(config, lang) {
  const { projectName, packageManager, bundler, useTypeScript, framework } = config;
  const pm = managers[packageManager];
  const formattedProjectName = utils.formatProjectName(projectName);
  
  console.log(lang.creatingProject
    .replace('{projectName}', formattedProjectName)
    .replace('{packageManager}', packageManager)
    .replace('{bundler}', bundler)
    .replace('{withTypeScript}', useTypeScript ? lang.withTypeScript : lang.withoutTypeScript)
  );

  const creationCommand = getCreationCommand(config, pm);
  utils.executeCommand(creationCommand);

  process.chdir(formattedProjectName);
  
  if (packageManager !== 'npm' && packageManager !== 'bun') {
    console.log(lang.installingDependencies);
    utils.executeCommand(pm.install);
  }

  utils.updatePackageJson(process.cwd(), (packageJson) => {
    packageJson.scripts.start = pm.run + ' start';
  });

  console.log(lang.finalizingProjectSetup);
  utils.executeCommand(pm.install);

  console.log(lang.projectCreated.replace('{projectName}', projectName));
  console.log(lang.startCommand.replace('{command}', `cd ${projectName} && ${pm.run} start`));
}

function getCreationCommand(config, pm) {
  const { bundler, useTypeScript, framework, projectName } = config;
  const commands = {
    'vite': `${pm.createVite} ${projectName} --template ${framework}${useTypeScript ? '-ts' : ''}`,
    'cra': `${pm.createReactApp} ${projectName}${useTypeScript ? ' --template typescript' : ''}`,
    'next': `${pm.createNext} ${projectName} --js ${useTypeScript ? '--typescript' : ''} --eslint --no-tailwind --no-src-dir --app --no-import-alias`
  };
  return commands[bundler] || (() => { throw new Error('Invalid bundler'); })();
}

async function initializeGit(lang) {
  try {
    console.log(lang.initializingGit);
    utils.executeCommand('git init');
    utils.executeCommand('git add .');
    utils.executeCommand('git commit -m "Initial commit"');
    console.log(lang.gitInitialized);
  } catch (error) {
    console.error(lang.gitInitError, error);
  }
}

async function installStateManager(config, lang) {
  const { packageManager, stateManager: stateManagerName, projectName } = config;
  const pm = managers[packageManager];
  const installCommand = getStateManagerInstallCommand(stateManagerName, pm);
  
  if (!installCommand) return;

  console.log(lang.installingStateManager.replace('{stateManager}', stateManagerName));
  utils.executeCommand(installCommand);

  const srcDir = path.join(process.cwd(), 'src');
  createStateManagerFiles(stateManagerName, srcDir, projectName);

  console.log(lang.stateManagerConfigured.replace('{stateManager}', stateManagerName));
}

function getStateManagerInstallCommand(stateManagerName, pm) {
  const commands = {
    'redux': `${pm.install} redux react-redux @reduxjs/toolkit`,
    'mobx': `${pm.install} mobx mobx-react-lite`,
    'recoil': `${pm.install} recoil`,
    'zustand': `${pm.install} zustand`
  };
  return commands[stateManagerName];
}

function createStateManagerFiles(stateManagerName, srcDir, projectName) {
  const creators = {
    'redux': () => {
      const storeDir = path.join(srcDir, 'store');
      utils.createDirectory(storeDir);
      utils.writeFile(path.join(storeDir, 'index.js'), getReduxStoreContent());
      utils.writeFile(path.join(srcDir, 'App.js'), getReduxAppContent(projectName));
    },
    'mobx': () => {
      const storesDir = path.join(srcDir, 'stores');
      utils.createDirectory(storesDir);
      utils.writeFile(path.join(storesDir, 'counterStore.js'), getMobxStoreContent());
      utils.writeFile(path.join(srcDir, 'App.js'), getMobxAppContent(projectName));
    },
    'recoil': () => {
      utils.writeFile(path.join(srcDir, 'atoms.js'), getRecoilAtomsContent());
      utils.writeFile(path.join(srcDir, 'App.js'), getRecoilAppContent(projectName));
    },
    'zustand': () => {
      utils.writeFile(path.join(srcDir, 'store.js'), getZustandStoreContent());
      utils.writeFile(path.join(srcDir, 'App.js'), getZustandAppContent(projectName));
    }
  };
  creators[stateManagerName]();
}

// Fonctions pour générer le contenu des fichiers de gestionnaire d'état
function getReduxStoreContent() { /* ... */ }
function getReduxAppContent(projectName) { /* ... */ }
function getMobxStoreContent() { /* ... */ }
function getMobxAppContent(projectName) { /* ... */ }
function getRecoilAtomsContent() { /* ... */ }
function getRecoilAppContent(projectName) { /* ... */ }
function getZustandStoreContent() { /* ... */ }
function getZustandAppContent(projectName) { /* ... */ }

async function installStylingLibrary(config, lang) {
  const { packageManager, stylingLibrary } = config;
  const pm = managers[packageManager];
  const installCommand = getStylingLibraryInstallCommand(stylingLibrary, pm);

  if (!installCommand) return;

  console.log(lang.installingStylingLibrary.replace('{library}', stylingLibrary));
  utils.executeCommand(installCommand);
}

function getStylingLibraryInstallCommand(stylingLibrary, pm) {
  const commands = {
    'styled-components': `${pm.install} styled-components`,
    'emotion': `${pm.install} @emotion/react @emotion/styled`,
    'tailwind': `${pm.install} -D tailwindcss postcss autoprefixer`,
    'sass': `${pm.install} -D sass`,
    'bootstrap': `${pm.install} bootstrap`,
    'pico': `${pm.install} @picocss/pico`
  };
  return commands[stylingLibrary];
}

function displayProjectSummary(config, lang) {
  console.log(lang.projectSummary);
  console.log(getProjectSummary(config, lang));
}

function getProjectSummary(summary, lang) {
  let summaryLines = [
    lang.summaryTemplate
      .replace('{projectName}', summary.projectName)
      .replace('{packageManager}', summary.packageManager)
      .replace('{bundler}', summary.bundler)
      .replace('{framework}', summary.framework)
      .replace('{language}', summary.useTypeScript ? 'TypeScript' : 'JavaScript')
  ];

  if (summary.stateManager !== 'none') {
    summaryLines.push(lang.summaryStateManager.replace('{stateManager}', summary.stateManager));
  }

  if (summary.stylingLibrary !== 'none') {
    summaryLines.push(lang.summaryStylingLibrary.replace('{stylingLibrary}', summary.stylingLibrary));
  }

  let additionalFeatures = [];
  if (summary.initGit) additionalFeatures.push(lang.summaryGit);
  if (summary.setupTests) additionalFeatures.push(lang.summaryTests);
  if (summary.setupCI) additionalFeatures.push(lang.summaryCI);
  if (summary.setupDocker) additionalFeatures.push(lang.summaryDocker);
  if (summary.installReactRouter) additionalFeatures.push(lang.summaryReactRouter);

  if (additionalFeatures.length > 0) {
    summaryLines.push(lang.summaryAdditionalFeatures);
    additionalFeatures.forEach(feature => {
      summaryLines.push(feature);
    });
  }

  summaryLines.push('');
  summaryLines.push(lang.startCommand.replace('{command}', `cd ${summary.projectName} && ${managers[summary.packageManager].run} start`));

  return summaryLines.join('\n');
}

// Exécution du script
main();