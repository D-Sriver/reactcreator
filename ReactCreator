#!/usr/bin/env node

const prompts = require('prompts');
const languages = require('./Languages');
const { managers } = require('./PackageManagers');

// Fonction pour créer le projet
async function createProject(projectName, packageManager, bundler, useTypeScript, lang) {
  const pm = managers[packageManager];
  const typeScriptMessage = useTypeScript ? lang.withTypeScript : lang.withoutTypeScript;
  console.log(lang.creatingProject.replace('{projectName}', projectName)
                                  .replace('{packageManager}', packageManager)
                                  .replace('{bundler}', bundler)
                                  .replace('{withTypeScript}', typeScriptMessage));
  
  let creationCommand;
  if (bundler === 'vite') {
    creationCommand = `${pm.createVite} ${projectName} --template ${useTypeScript ? 'react-ts' : 'react'}`;
  } else if (bundler === 'cra') {
    creationCommand = `${pm.run} create-react-app ${projectName}${useTypeScript ? ' --template typescript' : ''}`;
  }
    // Ajoutez ici la logique pour créer le projet
}

// Fonction pour choisir la langue
async function chooseLanguage() {
  const languageChoice = await prompts({
    type: 'select',
    name: 'language',
    message: 'Choose your language / Choisissez votre langue :',
    choices: [
      { title: 'English', value: 'en' },
      { title: 'Français', value: 'fr' }
    ]
  });
  return languageChoice.language;
}

// Fonction principale
async function main() {
  try {
    const language = await chooseLanguage();
    const lang = languages[language];

    console.log(lang.welcome);

    const allQuestions = [
      ...lang.questions,
      {
        type: 'confirm',
        name: 'useTypeScript',
        message: lang.useTypeScript
      }
    ];

    const response = await prompts(allQuestions);

    await createProject(response.projectName, response.packageManager, response.bundler, response.useTypeScript, lang);
  } catch (error) {
    console.error(lang.error, error);
  }
}

// Exécution du script
main();
